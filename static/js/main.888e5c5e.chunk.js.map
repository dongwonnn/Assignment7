{"version":3,"sources":["styles/GlobalStyle.tsx","components/common/Loading.tsx","components/common/Spinner.tsx","components/layout/TodoTemplate.tsx","utils/constants.ts","components/todo/template/head/TodoHead.tsx","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","utils/exceptionModal.ts","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","hooks/useTodo.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Loading","props","LoadingOutlined","style","fontSize","size","spin","StyledSpinnerWrapper","styled","Row","styleProps","Spinner","tip","delay","mask","className","justify","align","indicator","defaultProps","TodoTemplate","children","TodoTemplateBlock","React","memo","div","DATE_FORM","year","weekday","month","day","TIME_FORM","hour","minute","second","TodoHead","useState","Date","toLocaleDateString","date","toLocaleTimeString","time","setTime","useEffect","timer","setInterval","clearInterval","TodoHeadBlock","TodoItem","toggleTodo","removeTodo","todo","id","text","done","startDate","deadline","handleCompleteToggle","useCallback","handleRemove","TodoItemBlock","CheckCircle","onClick","CheckOutlined","Text","DateText","Remove","DeleteOutlined","css","TodoList","todos","TodoListBlock","map","exceptionModal","ERROR_MESSAGE","Modal","error","title","content","RangePicker","DatePicker","TodoCreate","nextId","createTodo","incrementNextId","value","setValue","setStartDate","setDeadline","InsertFormPositioner","InsertForm","onSubmit","e","preventDefault","Input","autoFocus","placeholder","onChange","target","RangePickerWrapper","_","dateStrings","start","end","CircleButton","PlusCircleOutlined","button","form","input","Todofooter","undoneTasks","filter","TodoFooterBlock","CenterText","length","TodoContainer","todoState","setTodoState","nextIdState","setNextIdState","loadData","saveData","data","localStorage","getItem","lastId","Number","JSON","parse","setItem","stringify","prevState","concat","useTodo","TodoFooter","App","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.888e5c5e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #eeeeee;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { ReactElement } from 'react';\r\nimport { SpinSize } from 'antd/lib/spin';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\ninterface ILoadingProps {\r\n  size?: SpinSize;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport default function Loading(props: ILoadingProps): ReactElement {\r\n  return <LoadingOutlined style={{ fontSize: props.size === 'large' ? 48 : 24, ...props.style }} spin />;\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport Loading from './Loading';\r\nimport { Spin, Row, Col } from 'antd';\r\nimport { SpinSize } from 'antd/lib/spin';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISpinnerProps {\r\n  tip?: string;\r\n  size?: SpinSize;\r\n  delay?: number;\r\n  style?: React.CSSProperties;\r\n  mask?: boolean;\r\n}\r\n\r\ninterface IWrapperProp {\r\n  // readonly [\"data-mask\"]: boolean;\r\n  ['data-mask']: boolean;\r\n}\r\n\r\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\r\n  background-color: ${(styleProps) => (styleProps['data-mask'] ? 'rgba(0, 0, 0, 0.1)' : 'transparent')};\r\n`;\r\n\r\nfunction Spinner(props: ISpinnerProps): ReactElement {\r\n  const { tip, size, delay, style, mask = false } = props;\r\n\r\n  return (\r\n    <StyledSpinnerWrapper className=\"spinner-wrap\" justify=\"center\" align=\"middle\" style={style} data-mask={mask}>\r\n      <Col>\r\n        <Spin indicator={<Loading size={size} />} delay={delay} tip={tip} size={size} />\r\n      </Col>\r\n    </StyledSpinnerWrapper>\r\n  );\r\n}\r\n\r\nSpinner.defaultProps = {\r\n  tip: '로딩중입니다.',\r\n  size: 'large',\r\n  delay: 0,\r\n  style: {},\r\n  mask: false,\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface TodoTemplateProps {\r\n  children: JSX.Element[];\r\n}\r\n\r\nconst TodoTemplate: FC<TodoTemplateProps> = ({ children }) => {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n};\r\n\r\nexport default React.memo(TodoTemplate);\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 70%;\r\n  height: 100vh;\r\n\r\n  min-width: 360px;\r\n  max-width: 700px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 30px;\r\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\r\n\r\n  margin: 0 auto;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","export const DATE_FORM: Intl.DateTimeFormatOptions = {\r\n  year: 'numeric',\r\n  weekday: 'long',\r\n  month: 'long',\r\n  day: 'numeric',\r\n};\r\n\r\nexport const TIME_FORM: Intl.DateTimeFormatOptions = {\r\n  hour: '2-digit',\r\n  minute: '2-digit',\r\n  second: '2-digit',\r\n};\r\n\r\nexport const EXCEPTION_MODAL_TITLE: string = '오류';\r\nexport const BLANK_ERROR_MESSAGE: string = '검색어를 입력해주세요.';\r\nexport const SELECT_NOT_ERROR_MESSAGE: string = '시작일, 완료 목표일을 선택해주세요.';\r\n","import React, { useEffect, useState } from 'react';\r\nimport { DATE_FORM, TIME_FORM } from 'utils/constants';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoHead = () => {\r\n  const [date] = useState(new Date().toLocaleDateString('en-US', DATE_FORM));\r\n  const [time, setTime] = useState(new Date().toLocaleTimeString('en-US', TIME_FORM));\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setTime(new Date().toLocaleTimeString('en-US', TIME_FORM));\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <p>{date}</p>\r\n      <p>{time}</p>\r\n    </TodoHeadBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoHead);\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 52px;\r\n  border-bottom: 3px solid #33bb77;\r\n\r\n  p {\r\n    text-align: center;\r\n    color: #119955;\r\n    padding-top: 5px;\r\n  }\r\n\r\n  p:first-child {\r\n    font-size: 22px;\r\n  }\r\n  p:last-child {\r\n    font-size: 26px;\r\n  }\r\n`;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { Itodo } from 'hooks/useTodo';\r\nimport { CheckOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface TodoItemProps {\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n  todo: Itodo;\r\n}\r\n\r\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\r\n  const { id, text, done, startDate, deadline } = todo;\r\n\r\n  const handleCompleteToggle = useCallback((id) => {\r\n    toggleTodo(id);\r\n  }, []);\r\n\r\n  const handleRemove = useCallback((id) => {\r\n    removeTodo(id);\r\n  }, []);\r\n\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={() => handleCompleteToggle(id)}>\r\n        {done && <CheckOutlined />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <DateText done={done}>\r\n        {startDate} ~ {deadline}\r\n      </DateText>\r\n      <Remove onClick={() => handleRemove(id)}>\r\n        <DeleteOutlined />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoItem);\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #119955;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  justify-content: sp;\r\n  align-items: center;\r\n  padding: 12px 0;\r\n  &:hover {\r\n    ${Remove} {\r\n      display: initial;\r\n    }\r\n  }\r\n\r\n  div:nth-child(3),\r\n  div:nth-child(4) {\r\n    font-size: 14px;\r\n  }\r\n\r\n  div:nth-child(2) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div<{ done: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 16px;\r\n  border: 1px solid #33bb77;\r\n  font-size: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #dddddd;\r\n      color: #dddddd;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div<{ done: boolean }>`\r\n  flex: 1;\r\n  color: #119955;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nconst DateText = styled.div<{ done: boolean }>`\r\n  padding: 0 20px;\r\n  color: #119955;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n","import React from 'react';\r\nimport TodoItem from './item/TodoItem';\r\nimport { Itodo } from 'hooks/useTodo';\r\nimport styled from 'styled-components';\r\n\r\ninterface TodoListProps {\r\n  todos: Itodo[];\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map((todo) => (\r\n        <TodoItem toggleTodo={toggleTodo} removeTodo={removeTodo} key={todo.id} todo={todo} />\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n","import { Modal } from 'antd';\r\nimport { EXCEPTION_MODAL_TITLE } from './constants';\r\n\r\nexport const exceptionModal = (ERROR_MESSAGE: string) => {\r\n  Modal.error({\r\n    title: `${EXCEPTION_MODAL_TITLE}`,\r\n    content: `${ERROR_MESSAGE}`,\r\n  });\r\n};\r\n","import React, { useState } from 'react';\r\nimport { BLANK_ERROR_MESSAGE, SELECT_NOT_ERROR_MESSAGE } from 'utils/constants';\r\nimport { exceptionModal } from 'utils/exceptionModal';\r\nimport { Itodo } from 'hooks/useTodo';\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { DatePicker } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\ninterface TodoCreateProps {\r\n  nextId: number;\r\n  createTodo: (todo: Itodo) => void;\r\n  incrementNextId: () => void;\r\n}\r\n\r\nconst TodoCreate = ({ nextId, createTodo, incrementNextId }: TodoCreateProps) => {\r\n  const [value, setValue] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [deadline, setDeadline] = useState('');\r\n\r\n  const handleDateChange = (_: any, dateStrings: [string, string]) => {\r\n    const [start, end] = dateStrings;\r\n    setStartDate(start);\r\n    setDeadline(end);\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (!value) {\r\n      exceptionModal(BLANK_ERROR_MESSAGE);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!startDate || !deadline) {\r\n      exceptionModal(SELECT_NOT_ERROR_MESSAGE);\r\n\r\n      return;\r\n    }\r\n\r\n    incrementNextId(); // nextId 하나 증가\r\n\r\n    createTodo({\r\n      id: nextId,\r\n      text: value,\r\n      done: false,\r\n      startDate,\r\n      deadline,\r\n    });\r\n\r\n    setValue(''); // input 초기화\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InsertFormPositioner>\r\n        <InsertForm onSubmit={handleSubmit}>\r\n          <Input autoFocus placeholder=\"What's need to be done?\" onChange={handleChange} value={value} />\r\n          <RangePickerWrapper onChange={handleDateChange} />\r\n          <CircleButton>\r\n            <PlusCircleOutlined />\r\n          </CircleButton>\r\n        </InsertForm>\r\n      </InsertFormPositioner>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoCreate);\r\n\r\nconst CircleButton = styled.button`\r\n  background: #33bb77;\r\n  width: 50px;\r\n  height: 50px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  left: 50%;\r\n  transform: translate(50%, 0%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  padding: 36px 60px 36px 40px;\r\n  border-bottom: 1px solid #eeeeee;\r\n  background: #eeeeee;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border: 1px solid #dddddd;\r\n  width: 60%;\r\n  outline: none;\r\n  font-size: 21px;\r\n  box-sizing: border-box;\r\n  color: #119955;\r\n  &::placeholder {\r\n    color: #dddddd;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst RangePickerWrapper = styled(RangePicker)`\r\n  width: 40%;\r\n`;\r\n","import React from 'react';\r\nimport { Itodo } from 'hooks/useTodo';\r\nimport styled from 'styled-components';\r\n\r\ninterface HooksTodoHeadProps {\r\n  todos: Itodo[];\r\n}\r\n\r\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\r\n  const undoneTasks = todos.filter((todo) => !todo.done);\r\n  return (\r\n    <TodoFooterBlock>\r\n      <CenterText>{undoneTasks.length} items left</CenterText>\r\n    </TodoFooterBlock>\r\n  );\r\n};\r\n\r\nexport default React.memo(Todofooter);\r\n\r\nconst TodoFooterBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-top: 24px;\r\n  padding-bottom: 24px;\r\n`;\r\n\r\nconst CenterText = styled.div`\r\n  color: #33bb77;\r\n  font-size: 18px;\r\n`;\r\n","import { useTodo } from 'hooks/useTodo';\r\nimport TodoTemplate from 'components/layout/TodoTemplate';\r\nimport TodoHead from 'components/todo/template/head/TodoHead';\r\nimport TodoList from 'components/todo/template/list/TodoList';\r\nimport TodoCreate from 'components/todo/template/create/TodoCreate';\r\nimport TodoFooter from 'components/todo/template/footer/TodoFooter';\r\n\r\nconst TodoContainer = () => {\r\n  const { todoState, nextIdState, incrementNextId, toggleTodo, removeTodo, createTodo } = useTodo();\r\n\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoHead />\r\n      <TodoCreate nextId={nextIdState} createTodo={createTodo} incrementNextId={incrementNextId} />\r\n      <TodoList toggleTodo={toggleTodo} removeTodo={removeTodo} todos={todoState} />\r\n      <TodoFooter todos={todoState} />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport type Itodo = {\r\n  id: number;\r\n  text: string;\r\n  done: boolean;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\n\r\nexport const useTodo = () => {\r\n  const [todoState, setTodoState] = useState<Itodo[]>([]);\r\n  const [nextIdState, setNextIdState] = useState(0);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    saveData();\r\n  }, [todoState]);\r\n\r\n  const incrementNextId = () => {\r\n    setNextIdState(nextIdState + 1);\r\n  };\r\n\r\n  const toggleTodo = (id: number) => {\r\n    setTodoState((prevState) =>\r\n      prevState.map((todo: Itodo) =>\r\n        todo.id === id\r\n          ? {\r\n              ...todo,\r\n              done: !todo.done,\r\n            }\r\n          : todo,\r\n      ),\r\n    );\r\n  };\r\n\r\n  const removeTodo = (id: number) => {\r\n    setTodoState((prevState) => prevState.filter((todo: Itodo) => todo.id !== id));\r\n  };\r\n\r\n  const createTodo = (todo: Itodo) => {\r\n    setTodoState((prevState) =>\r\n      prevState.concat({\r\n        ...todo,\r\n      }),\r\n    );\r\n  };\r\n\r\n  const loadData = () => {\r\n    let data = localStorage.getItem('todos') || '';\r\n    let lastId = localStorage.getItem('lastId');\r\n\r\n    setNextIdState(Number(lastId) + 1);\r\n    setTodoState(JSON.parse(data));\r\n  };\r\n\r\n  const saveData = () => {\r\n    let lastId = 0;\r\n    if (todoState.length > 0) {\r\n      lastId = todoState[todoState.length - 1].id;\r\n    }\r\n\r\n    localStorage.setItem('todos', JSON.stringify(todoState));\r\n    localStorage.setItem('lastId', JSON.stringify(lastId));\r\n  };\r\n\r\n  return {\r\n    todoState,\r\n    nextIdState,\r\n    incrementNextId,\r\n    toggleTodo,\r\n    removeTodo,\r\n    createTodo,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport Spinner from 'components/common/Spinner';\r\nimport TodoContainer from 'components/todo/TodoContainer';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction App() {\r\n  const isLogged = true;\r\n\r\n  return isLogged ? <TodoContainer /> : <Spinner mask />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport GlobalStyle from 'styles/GlobalStyle';\r\nimport App from 'App';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename=\"Assignmnet7\">\r\n    <GlobalStyle />\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}